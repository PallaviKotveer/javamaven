pipeline {
    environment {
        JAVA_TOOL_OPTIONS = "-Duser.home=/home/jenkins"
        WAR_FILE_NAME = ''
    }
    agent {
            label 'docker-slave'       
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    stages {
        stage('Build') {            
            steps {
                sh 'mvn -B -DskipTests clean package'                
             }
        }
        stage('Code Quality Check via SonarQube') {
               steps {
                   script {
                       def scannerHome = tool 'sonar-scanner';
                       withSonarQubeEnv("SonarQube") {
                       sh "${tool("sonar-scanner")}/bin/sonar-scanner \
                           -Dsonar.projectKey=java-maven \
                           -Dsonar.projectName=Simple-maven-proj \
                           -Dsonar.projectVersion=1.0 \
                           -Dsonar.sources=${WORKSPACE}/src/main/java/com/mycompany/app \
                           -Dsonar.language=java \
                           -Dsonar.java.binaries=target/classes\

                   }
               }
           }
       }
       stage('Backing up war file') {
            steps {
                script {
                    JENKINS_BACKUP_FILE_NAME = sh (
                        script: '''#!/bin/bash
                            # find latest backup
                            build_path="${WORKSPACE}/target"
                            latest_backup_folder=$(ls -t $build_path | head -n1)
                            full_path="$build_path/$latest_backup_folder"
                           
                            # pack it up
                            backup_name="$latest_backup_folder.tar.gz"
                            echo "***************************************************"
                            echo ${backup_name}
                            echo "***************************************************"
                            tar cvzf $backup_name $full_path
                            echo ${backup_name}
                            ''',
                        returnStdout: true
                    ).trim().tokenize().last()
                }
                step([$class: 'ClassicUploadStep', credentialsId: 'ccbt-infradevops-googlecloudstorage',  
                bucket: "gs://bank_app",
                      pattern: JENKINS_BACKUP_FILE_NAME])
                
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                     echo 'sucess block'
                    /*mail to: 'pallavikotvir@gmail.com',
                     subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
                     body: "Something is wrong with ${env.BUILD_URL}"*/
                }
                changed {
                    script {
                        if (currentBuild.currentResult == 'SUCCESS') { // Other values: SUCCESS, UNSTABLE
                            // Send an email only if the build status has changed from green/unstable to red
                            /*emailext subject: '$DEFAULT_SUBJECT',
                                body: '$DEFAULT_CONTENT',
                                recipientProviders: [
                                    [$class: 'CulpritsRecipientProvider'],
                                    [$class: 'DevelopersRecipientProvider'],
                                    [$class: 'RequesterRecipientProvider']
                                ], 
                                replyTo: '$DEFAULT_REPLYTO',
                                to: '$DEFAULT_RECIPIENTS'*/
                                echo 'I will always say Hello again!'

                                /*emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                                    recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"*/
                        }
                    }
                }
            }
        }
        
    }
}
