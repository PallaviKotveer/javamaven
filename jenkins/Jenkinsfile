pipeline {
    agent { label 'docker-slave' }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                    mail to: 'pallavikotvir@gmail.com',
                     subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
                     body: "Something is wrong with ${env.BUILD_URL}"
                }
                changed {
                    script {
                        if (currentBuild.currentResult == 'SUCCESS') { // Other values: SUCCESS, UNSTABLE
                            // Send an email only if the build status has changed from green/unstable to red
                            /*emailext subject: '$DEFAULT_SUBJECT',
                                body: '$DEFAULT_CONTENT',
                                recipientProviders: [
                                    [$class: 'CulpritsRecipientProvider'],
                                    [$class: 'DevelopersRecipientProvider'],
                                    [$class: 'RequesterRecipientProvider']
                                ], 
                                replyTo: '$DEFAULT_REPLYTO',
                                to: '$DEFAULT_RECIPIENTS'*/
                                echo 'I will always say Hello again!'

                                emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                                    recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
                        }
                    }
                }
            }
        }
        stage('Code Quality Check via SonarQube') {
               steps {
                   script {
                   def scannerHome = tool 'sonar-scanner';
                       withSonarQubeEnv("SonarQube") {
                       sh "${tool("sonar-scanner")}/bin/sonar-scanner -Dsonar.projectKey=java-maven -Dsonar.projectName=Simple-maven-proj -Dsonar.projectVersion=1.0 -Dsonar.sources=/var/lib/jenkins/workspace/sample/src/main/java/com/mycompany/app -Dsonar.language=java -Dsonar.java.binaries=build/classes"
                   }
               }
           }
       }
    }
}
